import asyncio

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery

from loader import bot, config

from tgbot.keyboards.inline.FirstTaskHint.incorrect_answer1 import incorrect1
from tgbot.keyboards.inline.FirstTaskHint.incorrect_answer2 import incorrect2
from tgbot.keyboards.inline.FirstTaskHint.incorrect_answer3 import incorrect3
from tgbot.keyboards.inline.FirstTaskHint.right_answer import answer_keyboard
from tgbot.keyboards.inline.go_second_task import go_next_second
from tgbot.misc.states import FirstTask

incorrect_answer = 0

async def answer_t1(message: Message, state: FSMContext):
    global incorrect_answer
    answer = message.text
    right_ansewer = ("–Ω—É —è –∑–∞—à–ª–∞ –≤ –¥—Ä—É–∑—å—è –∫ –ª–µ—Ä–µ –±–∞–Ω—â–∏–∫–æ–≤–æ–π –≤–≤–µ–ª–∞ —Ç–≤–æ–µ –∏–º—è —Ç–∞–º —Ç–µ–±—è –Ω–µ –±—ã–ª–æ —è –∑–∞—à–ª–∞ –∫ —è–Ω–µ –∑–≤—è–≥–∏–Ω—Ü–µ–≤–æ–π "
                     "–ø–æ—Ç–æ–º—É —á—Ç–æ –∑–Ω–∞—é —Ç–æ —á—Ç–æ –æ–Ω–∞ –±—ã–ª–∞ –¥–æ 11 –∫–ª–∞—Å—Å–∞ –≤—Ä–æ–¥–µ –±—ã –∫–∞–∫ –≤–æ—Ç –Ω—É —Ç–æ-–µ—Å—Ç—å –æ–Ω–∞ —Ç–æ—á–Ω–æ –¥–æ–ª–∂–Ω–∞ "
                     "—Ç–µ–±—è –∑–Ω–∞—Ç—å –∏ –≤—Å–µ –∏ –Ω–∞—à–ª–∞ —Ç–∞–º –≤–æ—Ç —Ç–∞–∫–∞—è —è —è –∂–µ –¥–µ–≤—É—à–∫–∞ —Ç—ã —á—Ç–æ —è –∂–µ —É–º–µ—é")

    if (answer.lower() == right_ansewer):
        await message.answer("–ù–∞–¥–µ—é—Å—å –¥–ª—è —Ç–µ–±—è —ç—Ç–æ –±—ã–ª–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ)"
                             "\n\n–ü–æ–º–Ω—é –∫–∞–∫ —Å–∏–¥–µ–ª –∏ –æ–±—â–∞–ª—Å—è —Å —Ç–æ–±–æ–π, –∏ –¥–∞–∂–µ –ø–æ–¥—É–º–∞—Ç—å –Ω–µ –º–æ–≥—É –Ω–∞—Å–∫–æ–ª—å–∫–æ –¥–∞–ª–µ–∫–æ –∑–∞–π–¥–µ—Ç –Ω–∞—à–∞ —Å —Ç–æ–±–æ–π –∏—Å—Ç–æ—Ä–∏—è."
                             "\n\n–ö—Å—Ç–∞—Ç–∏, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –∫–≤–µ—Å—Ç, —Ç–æ —Ç–µ–±–µ –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."
                             "\n–¢–≤–æ–π –ø—Ä–∏–∑ –∂–¥–µ—Ç —Ç–µ–±—è  –ø–æ–¥ –∫—É—Ö–æ–Ω–Ω—ã–º —Å—Ç–æ–ª–æ–º!", reply_markup=go_next_second)
        await bot.send_message(chat_id=config.tg_bot.admin_ids[0], text="–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        await state.finish()
    elif (incorrect_answer == 0):
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑", reply_markup=incorrect1)
        incorrect_answer += 1
    elif (incorrect_answer == 1):
        await message.answer("–°–Ω–æ–≤–∞ –Ω–µ –≤—ã—à–ª–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑–æ–∫", reply_markup=incorrect2)
        incorrect_answer += 1
    elif (incorrect_answer == 2):
        await message.answer("–ù—É –≤—Å–µ, –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–¥—Å–∫–∞–∑–∫–∞!", reply_markup=incorrect3)
        incorrect_answer += 1
    else:
        await message.answer("–ù—É —á—Ç–æ–∂ —Ç—ã —Ç–∞–∫, —Ç–∞–º –∂–µ –≤—Å–µ –ø—Ä–æ—Å—Ç–æ", reply_markup=answer_keyboard)


async def hint1(call: CallbackQuery):
    await call.answer(text="–°–º–µ—à–∫–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ üòé")


async def hint2(call: CallbackQuery):
    await call.answer(text="–ß–∏—Å–ª–æ –æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å –ª—É—á—à–µ –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ–º üòé")


async def hint3(call: CallbackQuery):
    await call.answer(
        text="–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: –Ω—É —è –∑–∞—à–ª–∞ –≤ –¥—Ä—É–∑—å—è –∫ –ª–µ—Ä–µ –±–∞–Ω—â–∏–∫–æ–≤–æ–π –≤–≤–µ–ª–∞ —Ç–≤–æ–µ –∏–º—è —Ç–∞–º —Ç–µ–±—è –Ω–µ –±—ã–ª–æ —è –∑–∞—à–ª–∞ –∫ —è–Ω–µ –∑–≤—è–≥–∏–Ω—Ü–µ–≤–æ–π")


async def answer(call: CallbackQuery):
    await call.answer(text="–í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–Ω–∞—é —Ç–æ —á—Ç–æ –æ–Ω–∞ –±—ã–ª–∞ –¥–æ 11 –∫–ª–∞—Å—Å–∞ –≤—Ä–æ–¥–µ –±—ã –∫–∞–∫ –≤–æ—Ç –Ω—É —Ç–æ-–µ—Å—Ç—å –æ–Ω–∞ —Ç–æ—á–Ω–æ –¥–æ–ª–∂–Ω–∞ "
                      "—Ç–µ–±—è –∑–Ω–∞—Ç—å –∏ –≤—Å–µ –∏ –Ω–∞—à–ª–∞ —Ç–∞–º –≤–æ—Ç —Ç–∞–∫–∞—è —è —è –∂–µ –¥–µ–≤—É—à–∫–∞ —Ç—ã —á—Ç–æ —è –∂–µ —É–º–µ—é")


def register_first_task(dp: Dispatcher):
    dp.register_message_handler(answer_t1, state=FirstTask.T1)

    dp.register_callback_query_handler(hint1, text="Hint1", state=FirstTask.T1)
    dp.register_callback_query_handler(hint2, text="Hint2", state=FirstTask.T1)
    dp.register_callback_query_handler(hint3, text="Hint3", state=FirstTask.T1)
    dp.register_callback_query_handler(answer, text="answer", state=FirstTask.T1)